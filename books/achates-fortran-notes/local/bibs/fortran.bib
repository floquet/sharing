%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Daniel Topa at 2024-11-28 15:22:36 -0700 


%% Saved with string encoding Unicode (UTF-8) 



@article{polancoprogramming,
	author = {Polanco, Carlos},
	date-added = {2024-11-28 12:56:57 -0700},
	date-modified = {2024-11-28 12:56:57 -0700},
	title = {PROGRAMMING IN FORTRAN 2018}}

@book{bose2019numerical,
	abstract = {This book systematically classifies the mathematical formalisms of computational models that are required for solving problems in mathematics, engineering and various other disciplines. It also provides numerical methods for solving these problems using suitable algorithms and for writing computer codes to find solutions. For discrete models, matrix algebra comes into play, while for continuum framework models, real and complex analysis is more suitable. The book clearly describes the method-algorithm-code approach for learning the techniques of scientific computation and how to arrive at accurate solutions by applying the procedures presented. It not only provides instructors with course material but also serves as a useful reference resource. Providing the detailed mathematical proofs behind the computational methods, this book appeals to undergraduate and graduate mathematics and engineering students. The computer codes have been written in the Fortran programming language, which is the traditional language for scientific computation. Fortran has a vast repository of source codes used in real-world applications and has continuously been upgraded in line with the computing capacity of the hardware. The language is fully backwards compatible with its earlier versions, facilitating integration with older source codes.},
	author = {Bose, Sujit Kumar},
	date-added = {2024-11-28 12:52:52 -0700},
	date-modified = {2024-11-28 12:53:11 -0700},
	publisher = {Springer},
	title = {Numerical methods of mathematics implemented in Fortran},
	volume = {197},
	year = {2019}}

@book{ruetsch2024cuda,
	abstract = {CUDA Fortran for Scientists and Engineers: Best Practices for Efficient CUDA Fortran Programming shows how high-performance application developers can leverage the power of GPUs using Fortran, the familiar language of scientific computing and supercomputer performance benchmarking. The authors presume no prior parallel computing experience, and cover the basics along with best practices for efficient GPU computing using CUDA Fortran. In order to add CUDA Fortran to existing Fortran codes, they explain how to understand the target GPU architecture, identify computationally-intensive parts of the code, and modify the code to manage the data and parallelism and optimize performance--all in Fortran, without having to rewrite in another language. Each concept is illustrated with actual examples so you can immediately evaluate the performance of your code in comparison. This second edition provides much needed updates on how to efficiently program GPUs in CUDA Fortran. It can be used either as a tutorial on GPU programming in CUDA Fortran as well as a reference text. Presents optimization strategies for current hardware, including Hopper generation GPUs Includes discussions of new language and hardware features, including managed memory, tensor cores, shuffle instructions, new multi-GPU paradigms Offers resources and strategies for porting large codes to GPUs, including language features as well as library use},
	author = {Ruetsch, Gregory and Fatica, Massimiliano},
	date-added = {2024-11-28 12:49:10 -0700},
	date-modified = {2024-11-28 12:49:23 -0700},
	publisher = {Elsevier},
	title = {CUDA Fortran for scientists and engineers: best practices for efficient CUDA Fortran programming},
	year = {2024}}

@book{clerman2011modern,
	abstract = {Fortran is one of the oldest high-level languages and remains the premier language for writing code for science and engineering applications. This book is for anyone who uses Fortran, from the novice learner to the advanced expert. It describes best practices for programmers, scientists, engineers, computer scientists and researchers who want to apply good style and incorporate rigorous usage in their own Fortran code or to establish guidelines for a team project. The presentation concentrates primarily on the characteristics of Fortran 2003, while also describing methods in Fortran 90/95 and valuable new features in Fortran 2008. The authors draw on more than a half century of experience writing production Fortran code to present clear succinct guidelines on formatting, naming, documenting, programming and packaging conventions and various programming paradigms such as parallel processing (including OpenMP, MPI and coarrays), OOP, generic programming and C language interoperability.},
	author = {Clerman, Norman S and Spector, Walter},
	date-added = {2024-11-28 12:47:16 -0700},
	date-modified = {2024-11-28 12:47:42 -0700},
	publisher = {Cambridge University Press},
	title = {Modern Fortran: style and usage},
	year = {2011}}

@book{markus2012modern,
	abstract = {From its earliest days, the Fortran programming language has been designed with computing efficiency in mind. The latest standard, Fortran 2008, incorporates a host of modern features, including object-orientation, array operations, user-defined types, and provisions for parallel computing. This tutorial guide shows Fortran programmers how to apply these features in twenty-first-century style: modular, concise, object-oriented, and resource-efficient, using multiple processors. It offers practical real-world examples of interfacing to C, memory management, graphics and GUIs, and parallel computing using MPI, OpenMP, and coarrays. The author also analyzes several numerical algorithms and their implementations and illustrates the use of several open source libraries. Full source code for the examples is available on the book's website.},
	author = {Markus, Arjen},
	date-added = {2024-11-28 12:46:14 -0700},
	date-modified = {2024-11-28 12:46:50 -0700},
	publisher = {Cambridge University Press},
	title = {Modern Fortran in practice},
	year = {2012}}

@book{ray2019fortran,
	abstract = {The programming language Fortran dates back to 1957 when a team of IBM engineers released the first Fortran Compiler. During the past 60 years, the language had been revised and updated several times to incorporate more features to enable writing clean and structured computer programs. The present version is Fortran 2018. Since the dawn of the computer era, there had been a constant demand for a ``larger'' and ``faster'' machine. To increase the speed there are three hurdles. The density of the active components on a VLSI chip cannot be increased indefinitely and with the increase of the density heat dissipation becomes a major problem. Finally, the speed of any signal cannot exceed the velocity of the light. However, by using several inexpensive processors in parallel coupled with specialized software and hardware, programmers can achieve computing speed similar to a supercomputer. This book can be used to learn the modern Fortran from the beginning and the technique of developing parallel programs using Fortran. It is for anyone who wants to learn Fortran. Knowledge beyond high school mathematics is not required. There is not another book on the market yet which deals with Fortran 2018 as well as parallel programming.},
	author = {Ray, Subrata},
	date-added = {2024-11-28 12:43:52 -0700},
	date-modified = {2024-11-28 12:44:13 -0700},
	publisher = {Chapman and Hall/CRC},
	title = {Fortran 2018 with parallel programming},
	year = {2019}}

@book{doi:10.1137/1.9781611973129,
	abstract = {The Fortran language standard has undergone significant upgrades in recent years (1990, 1995, 2003, and 2008). Numerical Computing with Modern Fortran illustrates many of these improvements through practical solutions to a number of scientific and engineering problems.

Readers will discover

    techniques for modernizing algorithms written in Fortran;

    examples of Fortran interoperating with C or C++ programs, plus using the IEEE floating-point standard for efficiency;

    illustrations of parallel Fortran programming using coarrays, MPI, and OpenMP; and

    a supplementary material with downloadable source codes discussed in the book. (see linked below)},
	address = {Philadelphia, PA},
	author = {Hanson, Richard J. and Hopkins, Tim},
	date-added = {2024-11-28 12:42:30 -0700},
	date-modified = {2024-11-28 12:42:49 -0700},
	doi = {10.1137/1.9781611973129},
	eprint = {https://epubs.siam.org/doi/pdf/10.1137/1.9781611973129},
	publisher = {Society for Industrial and Applied Mathematics},
	title = {Numerical Computing with Modern Fortran},
	url = {https://epubs.siam.org/doi/abs/10.1137/1.9781611973129},
	year = {2013},
	bdsk-url-1 = {https://epubs.siam.org/doi/abs/10.1137/1.9781611973129},
	bdsk-url-2 = {https://doi.org/10.1137/1.9781611973129}}

@book{brainerd2009guide,
	abstract = {This textbook provides an accessible introduction to the most important features of Fortran 2008. Features: presents a complete discussion of all the basic features needed to write complete Fortran programs; makes extensive use of examples and case studies to illustrate the practical use of features of Fortran 08, and supplies simple problems for the reader; provides a detailed exploration of control constructs, modules, procedures, arrays, character strings, data structures and derived types, pointer variables, and object-oriented programming; includes coverage of such major new features in Fortran 08 as coarrays, submodules, parameterized derived types, and derived-type input and output; highlights the topic of modules as the framework for organizing data and procedures for a Fortran program; investigates the excellent input/output facilities available in Fortran; contains appendices listing the many intrinsic procedures and providing a brief informal syntax specification for thelanguage.},
	author = {Brainerd, Walter S and others},
	date-added = {2024-11-28 12:35:06 -0700},
	date-modified = {2024-11-28 12:35:25 -0700},
	publisher = {Springer},
	title = {Guide to Fortran 2003 programming},
	year = {2009}}

@book{chivers2018introduction,
	abstract = {The book aims to provide coverage of a reasonable working subset of the Fortran programming language. The subset chosen should enable you to solve quite a wide range of frequently occurring problems.},
	author = {Chivers, Ian D and Sleightholme, Jane},
	date-added = {2024-11-28 12:33:58 -0700},
	date-modified = {2024-11-28 12:34:17 -0700},
	publisher = {Springer},
	title = {Introduction to programming with Fortran},
	volume = {2},
	year = {2018}}

@book{curcic2020modern,
	abstract = {Modern Fortran teaches you to develop fast, efficient parallel applications using twenty-first-century Fortran. In this guide, you'll dive into Fortran by creating fun apps, including a tsunami simulator and a stock price analyzer. Filled with real-world use cases, insightful illustrations, and hands-on exercises, Modern Fortran helps you see this classic language in a whole new light. Summary Using Fortran, early and accurate forecasts for hurricanes and other major storms have saved thousands of lives. Better designs for ships, planes, and automobiles have made travel safer, more efficient, and less expensive than ever before. Using Fortran, low-level machine learning and deep learning libraries provide incredibly easy, fast, and insightful analysis of massive data. Fortran is an amazingly powerful and flexible programming language that forms the foundation of high performance computing for research, science, and industry. And it's come a long, long way since starting life on IBM mainframes in 1956. Modern Fortran is natively parallel, so it's uniquely suited for efficiently handling problems like complex simulations, long-range predictions, and ultra-precise designs. If you're working on tasks where speed, accuracy, and efficiency matter, it's time to discover---or re-discover---Fortran.. About the technology For over 60 years Fortran has been powering mission-critical scientific applications, and it isn't slowing down yet! Rock-solid reliability and new support for parallel programming make Fortran an essential language for next-generation high-performance computing. Simply put, the future is in parallel, and Fortran is already there. Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications. About the book Modern Fortran teaches you to develop fast, efficient parallel applications using twenty-first-century Fortran. In this guide, you'll dive into Fortran by creating fun apps, including a tsunami simulator and a stock price analyzer. Filled with real-world use cases, insightful illustrations, and hands-on exercises, Modern Fortran helps you see this classic language in a whole new light. What's inside Fortran's place in the modern world Working with variables, arrays, and functions Module development Parallelism with coarrays, teams, and events Interoperating Fortran with C About the reader For developers and computational scientists. No experience with Fortran required. About the author Milan Curcic is a meteorologist, oceanographer, and author of several general-purpose Fortran libraries and applications. Table of Contents PART 1-GETTING STARTED WITH MODERN FORTRAN 1 Introducing Fortran 2 Getting started: Minimal working app PART 2-CORE ELEMENTS OF FORTRAN 3 Writing reusable code with functions and subroutines 4 Organizing your Fortran code using modules 5 Analyzing time series data with arrays 6 Reading, writing, and formatting your data PART 3-ADVANCED FORTRAN USE 7 Going parallel with Fortan coarrays 8 Working with abstract data using derived types 9 Generic procedures and operators for any data type 10 User-defined operators for derived types PART 4-THE FINAL STRETCH 11 Interoperability with C: Exposing your app to the web 12 Advanced parallelism with teams, events, and collectives},
	author = {Curcic, Milan},
	date-added = {2024-11-28 12:32:56 -0700},
	date-modified = {2024-11-28 12:33:24 -0700},
	publisher = {Manning Publications},
	title = {Modern Fortran: Building efficient parallel applications},
	year = {2020}}

@book{metcalf2024modern,
	abstract = {Fortran remains one of the principal programming languages used in high-performance scientific, numerical, and engineering computing. A series of significant revisions to the standard versions of the language have progressively enhanced its capabilities, and the current standard-Fortran 2023-brings with it further additions and improvements. The language as defined by its most recent standards, with their introduction of object-oriented programming and of coarrays, is often referred to generically as' Modern Fortran', and this term is increasingly used in the literature. Thus, we see that Fortran's particular advantages as a high-end numerical language, especially where arrays are the main form of data object and/or where complex arithmetic is involved, are still to the fore. It is able to attain the highest achievable optimization, mainly because multi-dimensional arrays are'natural'objects and because its pointers are highly constrained. There is every sign that Modern Fortran will continue to be used to tackle major scientific computing problems in the next decade and beyond and will long remain a living tribute to its early pioneers. This third edition of Modern Fortran Explained expands on the second. The material contained in the four final chapters of the second edition have been merged into the main text, thereby offering, in 20 chapters, a comprehensive and uniform description of Fortran 2018. The additional features now brought by the 2023 standard, which are mostly relatively minor in nature, are described in two final chapters, the first on generic programming and the second on the other features. This structure enables the reader to distinguish clearly between what is old and what is new. This new edition, written by experts in the field, three of whom have actively contributed to Fortran 2023, is thus a complete and authoritative description of Fortran in its latest form, with the intention that it remain the main reference work in the field.},
	author = {Metcalf, Michael and Reid, John and Cohen, Malcolm and Bader, Reinhold},
	date-added = {2024-11-28 12:31:48 -0700},
	date-modified = {2024-11-28 12:32:30 -0700},
	publisher = {Oxford University Press},
	title = {Modern Fortran Explained: Incorporating Fortran 2023},
	year = {2024}}

@book{koonin2018computational,
	abstract = {Computational Physics is designed to provide direct experience in the computer modeling of physical systems. Its scope includes the essential numerical techniques needed to "do physics" on a computer. Each of these is developed heuristically in the text, with the aid of simple mathematical illustrations. However, the real value of the book is in the eight Examples and Projects, where the reader is guided in applying these techniques to substantial problems in classical, quantum, or statistical mechanics. These problems have been chosen to enrich the standard physics curriculum at the advanced undergraduate or beginning graduate level. The book will also be useful to physicists, engineers, and chemists interested in computer modeling and numerical techniques. Although the user-friendly and fully documented programs are written in FORTRAN, a casual familiarity with any other high-level language, such as BASIC, PASCAL, or C, is sufficient. The codes in BASIC and FORTRAN are available on the web at https://www.computationalphysics.info. They are available in zip format, which can be expanded on UNIX, Window, and Mac systems with the proper software. The codes are suitable for use (with minor changes) on any machine with a FORTRAN-77 compatible compiler or BASIC compiler. The FORTRAN graphics codes are available as well. However, as they were originally written to run on the VAX, major modifications must be made to make them run on other machines.},
	author = {Koonin, Steven E},
	date-added = {2024-11-28 12:30:13 -0700},
	date-modified = {2024-11-28 12:30:30 -0700},
	publisher = {CRC Press},
	title = {Computational physics: Fortran version},
	year = {2018}}

@article{backus1978history,
	abstract = {Before 1954 almost all programming was done in machine language or assembly language. Programmers rightly regarded their work as a complex, creative art that required human inventiveness to produce an efficient program. Much of their effort was devoted to overcoming the difficulties created by the computers of that era: the lack of index registers, the lack of built- in floating point operations, restricted instruction sets (which might have AND but not OR, for example), and primitive input- output arrangements. Given the nature of computers, the services which ``automatic programming'' performed for the programmer were concerned with overcoming the machine's shortcomings. Thus the primary concern of some ``automatic programming'' systems was to allow the use of symbolic addresses and decimal numbers (e.g., the MIDAC Input Translation Program [Brown and Carr 1954]).
But most of the larger ``automatic. Programming'' systems (with the exception of Laning and Zierler's algebraic system [Laning and Zierler 1954] and the A-2 compiler [Remington Rand 1953; Moser 1954]) simply provided a synthetic ``computer'' with an order code different from that of the real machine. This synthetic computer usually had floating point instructions and index registers and had improved input-output commands; it was therefore much easier to program than its real counterpart.},
	author = {Backus, John},
	date-added = {2024-11-28 12:28:33 -0700},
	date-modified = {2024-11-28 12:28:46 -0700},
	journal = {ACM Sigplan Notices},
	number = {8},
	pages = {165--180},
	publisher = {ACM New York, NY, USA},
	title = {The history of Fortran I, II, and III},
	volume = {13},
	year = {1978}}

@book{adams1992fortran,
	author = {Adams, Jeanne C and Brainerd, Walter S and Martin, Jeanne T and Smith, Brian T and Wagener, Jerrold L},
	date-added = {2024-11-28 12:25:46 -0700},
	date-modified = {2024-11-28 12:40:46 -0700},
	publisher = {McGraw-Hill New York},
	title = {Fortran 90 Handbook: Complete ANSI/ISO Reference},
	volume = {32},
	year = {1992}}
